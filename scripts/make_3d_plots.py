#!/usr/bin/env python
# File created on 09 Feb 2010
#file make_3d_plots.py

from __future__ import division

__author__ = "Jesse Stombaugh"
__copyright__ = "Copyright 2010, The QIIME project"
__credits__ = ["Jesse Stombaugh", "Rob Knight", "Micah Hamady", "Dan Knights"]
__license__ = "GPL"
__version__ = "1.0-dev"
__maintainer__ = "Jesse Stombaugh"
__email__ = "jesse.stombaugh@colorado.edu"
__status__ = "Pre-release"
 

from qiime.util import parse_command_line_parameters
from optparse import make_option
from qiime.make_3d_plots import generate_3d_plots
from qiime.parse import parse_map,parse_coords,group_by_field,group_by_fields
import shutil
import os
from random import choice
from time import strftime
from qiime.util import get_qiime_project_dir
from qiime.make_3d_plots import get_coord,get_map,remove_unmapped_samples,\
                                process_colorby,create_dir
                                

script_description = """This script generates 3D PCoA plots using the principal \
coordinates file generated by performing beta diversity measures of an OTU \
table."""

script_usage = """
Example 1: Create 3D plot from only the pca/pcoa data, where each ID is colored:

Usage: make_3d_plots.py -i raw_pca_data.txt

Example 2: Create a Kinemage with two coloring schemes (Day and Type):

Usage: make_3d_plots.py -i raw_pca_data.txt -m input_map.txt -b 'Day,Type'

Example 3: Create 3D plots for a combination of label headers from a mapping 
file:

Usage: make_3d_plots.py -i raw_pca_data.txt -m input_map.txt 
-b 'Type&&Day' -o ./test/

"""

required_options = [\
 # Example required option
 #make_option('-i','--input_dir',help='the input directory'),\
 make_option('-i', '--coord_fname', dest='coord_fname', \
 help='This is the path to the principal coordinates file (i.e., resulting file \
from principal_coordinates.py)')
]

optional_options = [\
 # Example optional option
 #make_option('-o','--output_dir',help='the output directory [default: %default]'),\
 make_option('-m', '--map_fname', dest='map_fname', \
     help='This is the user-generated mapping file [default=%default]'),
 make_option('-b', '--colorby', dest='colorby',\
     help='This is the categories to color by in the plots from the \
user-generated mapping file. The categories must match the name of a column \
header in the mapping file exactly and multiple categories can be list by comma \
separating them without spaces. The user can also combine columns in the \
mapping file by separating the categories by "&&" without spaces \
[default=%default]'),
 make_option('-a', '--custom_axes',help='This is the category from the \
user-generated mapping file to use as a custom axis in the plot.  For instance, \
there is a pH category and would like to seethe samples plotted on that axis \
instead of PC1, PC2, etc., one can use this option.  It is also useful for \
plotting time-series data [default: %default]'),
 make_option('-p', '--prefs_path',help='This is the user-generated preferences \
file. NOTE: This is a file with a dictionary containing preferences for the \
analysis [default: %default]'),
 make_option('-o', '--dir_path', dest='dir_path',help='This is the location \
where the resulting output should be written [default=%default]',default='')
]

def main():
    option_parser, opts, args = parse_command_line_parameters(
      script_description=script_description,
      script_usage=script_usage,
      version=__version__,
      required_options=required_options,
      optional_options=optional_options)

    data = {}

    #Open and get coord data
    data['coord'] = get_coord(opts.coord_fname)

    #Open and get mapping data, if none supplied create a pseudo mapping \
    #file
    if opts.map_fname:
        data['map'] = get_map(opts, data)
    else:
        data['map']=(([['#SampleID','Sample']]))
        for i in range(len(data['coord'][0])):
            data['map'].append([data['coord'][0][i],'Sample'])

    # remove any samples not present in mapping file
    remove_unmapped_samples(data['map'],data['coord'])

    #Determine which mapping headers to color by, if none given, color by all 
    # columns in map file
    if opts.prefs_path:
        prefs = eval(open(opts.prefs_path, 'U').read())
        prefs, data=process_colorby(None, data, prefs)
    elif opts.colorby:
        prefs,data=process_colorby(opts.colorby,data)
    else:
        default_colorby = ','.join(data['map'][0])
        prefs,data=process_colorby(default_colorby,data)
        prefs={'Sample':{'column':'#SampleID'}}

    # process custom axes, if present.
    custom_axes = None
    if opts.custom_axes:
        custom_axes = process_custom_axes(options.custom_axes)
        get_custom_coords(custom_axes, data['map'], data['coord'])
        remove_nans(data['coord'])
        scale_custom_coords(custom_axes,data['coord'])

    # Generate random output file name and create directories
    dir_path = opts.dir_path
    if dir_path and not dir_path.endswith('/'):
        dir_path = dir_path + '/'
    dir_path = create_dir(dir_path,'3d_plots_') 

    alphabet = "ABCDEFGHIJKLMNOPQRSTUZWXYZ"
    alphabet += alphabet.lower()
    alphabet += "01234567890"

    qiime_dir=get_qiime_project_dir()

    jar_path=os.path.join(qiime_dir,'qiime/support_files/jar/')

    data_file_path=''.join([choice(alphabet) for i in range(10)])
    data_file_path=strftime("%Y_%m_%d_%H_%M_%S")+data_file_path
    data_file_dir_path = dir_path+data_file_path

    data_file_dir_path=create_dir(data_file_dir_path,'')
    jar_dir_path = create_dir(os.path.join(dir_path,'jar/'),'')
    shutil.copyfile(os.path.join(jar_path,'king.jar'), jar_dir_path+'king.jar')

    filepath=opts.coord_fname
    filename=filepath.strip().split('/')[-1]
    
    try:
        action = generate_3d_plots
    except NameError:
        action = None
    #Place this outside try/except so we don't mask NameError in action
    if action:
        action(prefs, data, custom_axes, dir_path, data_file_path,filename)


if __name__ == "__main__":
    main()