.. _preparing_files_for_qiime:

.. toctree::
   :maxdepth: 1

=========================
Preparing Files for Qiime
=========================

Mapping Files
-------------


Mapping File Overview
+++++++++++++++++++++
The mapping file is generated by the user. This file contains all of the information about the samples necessary to perform the data analysis. In general, the mapping file should contain the name of each sample, the barcode sequence used for each sample, the linker/primer sequence used to amplify the sample, and a description column. One should also include in the mapping file any metadata that relates to the samples (for instance, health status or sampling site) and any additional information relating to specific samples that may be useful to have at hand when considering outliers (for example, what medications a patient was taking at time of sampling).

The header for this mapping file starts with a pound (#) character, and generally requires a `SampleID`, `BarcodeSequence`, `LinkerPrimerSequence`, and a `Description`, all tab separated.  The following example header represents the minimum field requirement for the mapping file:

.. note::
   * #SampleID	BarcodeSequence LinkerPrimerSequence	Description

Additional optional headers can follow the `LinkerPrimerSequence` header.  Any lines following this header that start with the pound character are considered to be comment lines and are ignored by QIIME.

Data fields do not start with a pound character.  These fields are tab separated, and have restrictions regarding character usage.  SampleID fields only accept alphanumeric and peroid (.) characters.  The other data fields will accept alphanumeric, period (.), underscore (_), percent (%), plus (+), and minus (-) characters.

You are highly encouraged to validate your mapping file using `check_id_map.py <../scripts/check_id_map.html>`_ before attempting to analyze your data. This tool will check for errors, and make suggestions for other aspects of the file to be edited (errors and warnings are output to a log file, and suggested changes to invalid characters are output to a `_corrected.txt` file).  The contents of a sample mapping file are shown here - as you can see, a nucleotide barcode sequence is provided for each of the 9 samples, as well as metadata related to treatment group and date of birth, and general run descriptions about the project:

.. note::

   * #SampleID	BarcodeSequence LinkerPrimerSequence	Treatment	DOB	Description
   * #Example mapping file for the QIIME analysis package. These 9 samples are from a study of the effects of
   * #exercise and diet on mouse cardiac physiology (Crawford, et al, PNAS, 2009).
   * PC.354	AGCACGAGCCTA	YATGCTGCCTCCCGTAGGAGT	Control	20061218	Control_mouse__I.D._354
   * PC.355	AACTCGTCGATG	YATGCTGCCTCCCGTAGGAGT	Control	20061218	Control_mouse__I.D._355
   * PC.356	ACAGACCACTCA	YATGCTGCCTCCCGTAGGAGT	Control	20061126	Control_mouse__I.D._356
   * PC.481	ACCAGCGACTAG	YATGCTGCCTCCCGTAGGAGT	Control	20070314	Control_mouse__I.D._481
   * PC.593	AGCAGCACTTGT	YATGCTGCCTCCCGTAGGAGT	Control	20071210	Control_mouse__I.D._593
   * PC.607	AACTGTGCGTAC	YATGCTGCCTCCCGTAGGAGT	Fast	20071112	Fasting_mouse__I.D._607
   * PC.634	ACAGAGTCGGCT	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	Fasting_mouse__I.D._634
   * PC.635	ACCGCAGAGTCA	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	Fasting_mouse__I.D._635
   * PC.636	ACGGTGAGTGTC	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	Fasting_mouse__I.D._636

This example mapping file is available here: `Example Mapping File <../../../documentation/Examples/File_Formats/Example_Mapping_File.txt>`_ (Right click and use 'download' or 'save as' to save this file)

During demultiplexing with `split_libraries.py <../scripts/split_libraries.html>`_, the `SampleID` that is associated with the barcode found in a given sequence is used to label the output sequence.  An example set of such assignments are seen in the `Tutorial <tutorial.html#assign-samples-to-multiplex-reads>`_.  Note that in this example, the barcode associated with `PC.634`, `ACAGAGTCGGCT` was found in the first two sequences, and so the output `seqs.fna` file has these sequences labeled as `PC.634_1` and `PC.634_2` respectively.  The third sequence contained the barcode `AGCACGAGCCTA`, and hence was associated with `PC.354`.

Generating a Mapping File by Hand
+++++++++++++++++++++++++++++++++

The easiest way to generate a mapping file is to use a spreadsheet program, such as Microsoft Excel.  Each header and field should be in its own column.  When saving the file, set the format to text csv, the field delimiter as a tab, and leave the text delimiter blank.  Once the file is saved, open it in a basic text editor to see if the formatting meets the criteria given above.  Finally, use `check_id_map.py <../scripts/check_id_map.html>`_ to test the file for QIIME compatability.

Fixing Problems in the Mapping File
+++++++++++++++++++++++++++++++++++

`check_id_map.py <../scripts/check_id_map.html>`_ will test for many problems in the mapping file, such as incorrect character usage.  A `_corrected.txt` form of the mapping file will be generated containing invalid characters replaced by allowed characters.  The following is an example of an incorrectly formatted mapping file, with invalid characters, duplicated values that should be unique (`SampleID`, `BarcodeSequence`), non DNA characters in the `LinkerPrimerSequence`, and a missing `Description` cell.

.. note::

   * #SampleID	BarcodeSequence LinkerPrimerSequence	Treatment	DOB	Description
   * #Example mapping file for the QIIME analysis package. These 9 samples are from a study of the effects of
   * #exercise and diet on mouse cardiac physiology (Crawford, et al, PNAS, 2009).
   * PC&&&&	AGCACGAGCCTA	YATGCTGCCTCCCGTAGGAGT	Control	20061218	Control_mouse__I.D._354
   * PC.355	AGCACGAGCCTA	YATGCTGCCTCCCGTAGGAGT	Control	20061218	Control_mouse__I.D._355
   * PC.355	ACAGACCACTCA	YATGCTGCCTCCCGTAGGAGT	Control	20061126	Control_mouse__I.D._356
   * PC_481	ACCAGCGACTAG	ZATGCTGCCTCCCGTAGGAGT	Control	20070314	Control_mouse__I.D._481
   * PC.593	AGCAGCACTTGT	YATGCTGCCTCCCGTAGGAGT	Control	20071210	Control_mouse__I.D._593
   * PC.607	AACTGTGCGTAC	YATGCTGCCTCCCGTAGGAGT	Fast^2	20071112	Fasting_mouse__I.D._607
   * PC.634	ACAGAGTCGGCT	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	
   * PC.635	ACCGCAGAGTCA	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	Fasting_mouse__I.D._635
   * PC.636	ACGGTGAGTGTC	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	Fasting_mouse__I.D._636

The corrected mapping file will replace invalid characters and fill in missing `Description` fields.  The example corrected mapping file output is below:

.. note::

   * #SampleID	BarcodeSequence	LinkerPrimerSequence	Treatment	DOB	Description
   * #Example mapping file for the QIIME analysis package. These 9 samples are from a study of the effects of
   * #exercise and diet on mouse cardiac physiology (Crawford, et al, PNAS, 2009).
   * PC....	AGCACGAGCCTA	YATGCTGCCTCCCGTAGGAGT	Control	20061218	Control_mouse__I.D._354
   * PC.355	AGCACGAGCCTA	YATGCTGCCTCCCGTAGGAGT	Control	20061218	Control_mouse__I.D._355
   * PC.355	ACAGACCACTCA	YATGCTGCCTCCCGTAGGAGT	Control	20061126	Control_mouse__I.D._356
   * PC.481	ACCAGCGACTAG	ZATGCTGCCTCCCGTAGGAGT	Control	20070314	Control_mouse__I.D._481
   * PC.593	AGCAGCACTTGT	YATGCTGCCTCCCGTAGGAGT	Control	20071210	Control_mouse__I.D._593
   * PC.607	AACTGTGCGTAC	YATGCTGCCTCCCGTAGGAGT	Fast_2	20071112	Fasting_mouse__I.D._607
   * PC.634	ACAGAGTCGGCT	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	missing_description
   * PC.635	ACCGCAGAGTCA	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	Fasting_mouse__I.D._635
   * PC.636	ACGGTGAGTGTC	YATGCTGCCTCCCGTAGGAGT	Fast	20080116	Fasting_mouse__I.D._636

However, this corrected mapping file is still not usable.  The log file generated by `check_id_map.py <../scripts/check_id_map.html>`_ explains the remaining problems.  The barcode `AGCACGAGCCTA` is duplicated, and appears in the first two rows.  Rows two and three contain the same `SampleID` value.  These errors will have to be fixed by hand.  Secondly, the `Z` character in the fourth row `LinkerPrimerSequence` is not a valid IUPAC DNA character and needs to be replaced with a legitimate nucleotide code.

Mapping Files Without Barcodes and/or Primers
+++++++++++++++++++++++++++++++++++++++++++++

In some circumstances, users may need to generate a mapping file that does not contain barcodes and/or primers.  To generate such a mapping file, the header and column for `BarcodeSequence` is removed and `LinkerPrimerSequence` fields can be left empty.  An example of such a file is below (note that the tabs are still present for the empty `LinkerPrimerSequence` field):

.. note::

   * #SampleID	LinkerPrimerSequence	Treatment DOB	Description
   * #Example mapping file for the QIIME analysis package. These 9 samples are from a study of the effects of
   * #exercise and diet on mouse cardiac physiology (Crawford, et al, PNAS, 2009).
   * PC.354		Control	20061218	Control_mouse__I.D._354
   * PC.355		Control	20061218	Control_mouse__I.D._355
   * PC.356		Control	20061126	Control_mouse__I.D._356
   * PC.481		Control	20070314	Control_mouse__I.D._481
   * PC.593		Control	20071210	Control_mouse__I.D._593
   * PC.607		Fast	20071112	Fasting_mouse__I.D._607
   * PC.634		Fast	20080116	Fasting_mouse__I.D._634
   * PC.635		Fast	20080116	Fasting_mouse__I.D._635
   * PC.636		Fast	20080116	Fasting_mouse__I.D._636

To validate such a mapping file, the user will need to disable barcode and primer testing with the -p and -b parameters:

::

	check_id_map.py -m <mapping_filepath> -o check_id_output/ -p -b



Sequence ID to Taxonomy Mapping Files
-------------------------------------

Several QIIME modules, such as `assign_taxonomy.py <../scripts/assign_taxonomy.html>`_, require a sequence ID to taxonomy mapping file when one is using a custom training sequence set or BLAST database.  ID to taxonomy mapping files are tab delimited, with the sequence ID as the first column, and a semicolon-separated taxonomy, in descending order, as the second column.  An example of an ID to taxonomy mapping file is show below:

.. note::

   * 339039	Bacteria;Proteobacteria;Alphaproteobacteria;Rhodospirillales;unclassified_Rhodospirillales
   * 199390	Bacteria;Chloroflexi;Anaerolineae;Caldilineae;Caldilineales;Caldilineacea;unclassified_Caldilineacea
   * 370251	Bacteria;Proteobacteria;Gammaproteobacteria;unclassified_Gammaproteobacteria
   * 11544	Bacteria;Actinobacteria;Actinobacteria;Actinobacteridae;Actinomycetales;unclassified_Actinomycetales
   * 460067	Unclassified
   * 256904	Bacteria
   * 286896	Bacteria;Actinobacteria;Actinobacteria;Actinobacteridae;Actinomycetales;Micrococcineae;Micrococcaceae;Kocuria
   * 127471	Bacteria;Bacteroidetes;Sphingobacteria;Sphingobacteriales;Crenotrichaceae;Terrimonas
   * 155634	Archaea;Euryarchaeota;Methanobacteria;Methanobacteriales;Methanobacteriaceae;Methanosphaera

This file can be downloaded here: `Example ID to Taxonomy Mapping File <../../../documentation/Examples/File_Formats/Example_ID_to_Taxonomy_mapping_File.txt>`_ (Right click and use 'download' or 'save as' to save this file)

Several Greegenes (http://greengenes.lbl.gov/) sequence ID to taxonomy mapping files are available for download in this Greengenes sequences, OTU, and mapping file collection: (`Greengenes OTU, sequences, and mapping files <http://greengenes.lbl.gov/Download/Sequence_Data/Greengenes_format/greengenes16SrRNAgenes.txt.gz>`_

To add taxonomy mapping to an existing sequence ID to taxonomy mapping file, open the existing taxonomy mapping file in a spreadsheet, such as Microsoft Excel.  Save new sequence IDs in the first column, and the semicolon-separated taxa in the second column (make sure there are not extra spaces, tabs, or other white space around these entries).  Save this modified mapping file with the field delimiter as a tab, and leave the text delimiter blank.  It is best to visually inspect the modified ID to taxonomy mapping file in a basic text editor to ensure that no extraneous characters or spacings were saved during this process.

